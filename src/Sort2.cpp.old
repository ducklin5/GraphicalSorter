#include <iostream>
#include <SFML/Graphics.hpp>
#include <time.h>

//create a new type
struct ArraynSize{
	int size;
	float* set;
};

//declare our function names
void printArray( float a[], const int n  );
void swap(float& x, float& y);
void sort (struct ArraynSize );
void drawLines (struct ArraynSize);

int main()
{
	//create an array with random numbers
	int NoOfValues = 100;
	float a[NoOfValues];
	int seed = time(NULL);
	srand(seed);
	for(int i = 0; i < NoOfValues; i++){
		a[i] = (rand()/100)%300;
	};

	//Create an ArraynSize object
	//which holds the array of random numbers and the size of said array
	//this is needed to use sf::Thread for multi-threading
	struct ArraynSize Param;
	Param.size = NoOfValues;
	Param.set = a;
	
	//create a window called Sort Algorithms
	//we will draw to this
	sf::RenderWindow window(sf::VideoMode(640, 480), "Sort Algorithms");
	
	// Make and run thread to Draw our array of random numbers as lines
	sf::Thread tDrawLines(&drawLines,Param);
	tDrawLines.launch();
	
	sf::Thread tSort(&sort,Param);
	
	sf::Event event;
	while (window.pollEvent(event))
	{
		if (event.type == sf::Event::Closed)
			window.close();
		else if (event.type == sf::Event::MouseButtonPressed) // onCanvasClick
			tSort.launch(); // Sort our Array of random numbers
	}
	
	
}

//Draw any array of floating numbers as lines
void drawLines (struct ArraynSize p){

	//make an array of rectangle with the same number of elements as the input array
	sf::RectangleShape rectangle[p.size];

	while (window.isOpen())
	{
		window.clear();
		for (int x = 0; x < p.size; x++ ){
			rectangle[x].setSize(sf::Vector2f(p.set[x], 1));
			rectangle[x].setPosition(10, 5 +(x*5));
		}
		for (int x = 0; x < p.size; x++ ){
			window.draw(rectangle[x]);
		}
		window.display();
	}
}


// Print any array of floating numbers
void printArray( float a[], const int n )
{
	for (int i = 0; i < n - 1; i++) {
		std::cout << a[i] << ", ";
	}
	std::cout << a[n-1] << std::endl;
}


// Create sort function (with assisting swap function) >> not my code
void swap(float& x, float& y)
{
	float temp = x;
	x = y;
	y = temp;
}

void sort( struct ArraynSize p)
{
	printArray(p.set, p.size);
	for (int i = p.size-1; i > 0; i--){
		for (int j = 0; j < i; j++){
			if (p.set[j] > p.set[j+1]){swap(p.set[j],p.set[j+1]);};
		}
	}
	printArray(p.set, p.size);
}
